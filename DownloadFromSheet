function downloadFile(){
  var folderID = "insert here id folder"
  var folder = DriveApp.getFolderById(folderID);
  var ss = SpreadsheetApp.getActiveSheet();
  var colEquipmentType = 6
  var colOEM = 7
  var colTypeSize = 8
  var colLink = 3
  // var rowStart = 1794 //1495
  // var rowEnd = 1796 //2000
  var rowEnd = ss.getLastRow();
  var rowStart = 2080

  for(rowStart; rowStart <= rowEnd; rowStart++){
    Logger.log(rowStart);
    var trackMerged = ss.getRange(rowStart, 16);
    var range = ss.getRange(rowStart, colLink);
    var assembly = ss.getRange(rowStart,10).getValues();
    var partDscr = ss.getRange(rowStart,11).getValues();
    var plant = ss.getRange(rowStart,13).getValues();
    var linkName = range.getValues();
    if (assembly != "#N/A"){
      var filename = assembly+" "+partDscr+" "+plant+" "+linkName
    }else{
      var filename = linkName;
    }
    Logger.log(filename);

    var url = /"(.*?)"/.exec(range.getFormulaR1C1())[1];
    if(url != "http://#!"){
      var regExp = new RegExp("([a-zA-Z0-9-_]{33})"); 
      var fileID = regExp.exec(url)[1];
      var files = DriveApp.getFileById(fileID);

      var nameEqType = ss.getRange(rowStart, colEquipmentType).getValues();
      var nameOEM = ss.getRange(rowStart, colOEM).getValues();
      var nameTypeSize = ss.getRange(rowStart,colTypeSize).getValues();
      Logger.log(nameEqType);
      Logger.log(nameOEM);
      Logger.log(nameTypeSize);

      if (trackMerged.getValues() == ""){
        if (nameEqType == "#N/A"){
          nameEqType = "Other";
        }

        if(checkFolder(folderID, nameEqType) == false){
          folder.createFolder(nameEqType);
        }
          var idEqType = DriveApp.getFoldersByName(nameEqType).next().getId();

        if (nameEqType != "Other"){
          if(checkFolder(idEqType, nameOEM) == false){
            DriveApp.getFolderById(idEqType).createFolder(nameOEM);
          }
            var idOEM = DriveApp.getFolderById(idEqType).getFoldersByName(nameOEM).next().getId();
        
          if(checkFolder(idOEM, nameTypeSize) == false){
            DriveApp.getFolderById(idOEM).createFolder(nameTypeSize);
          }
            var idTypeSize = DriveApp.getFolderById(idOEM).getFoldersByName(nameTypeSize).next().getId();

            if(checkFile(idTypeSize, filename) == false){
              DriveApp.getFolderById(idTypeSize).createFile(files).setName(filename);
              Logger.log("Create file done");
            }else{Logger.log("File exist");}
            if(checkFile(idTypeSize,filename) == false){
              Logger.log("File does not exist")
              trackMerged.setValue("-");
            }else{
              trackMerged.setValue("+"); 
            }
        }else{
          if(checkFile(idEqType, filename) == false){
            DriveApp.getFolderById(idEqType).createFile(files).setName(filename);
            Logger.log("Create file done");
            }else{Logger.log("File exist");}
            if(checkFile(idEqType, filename) == false){
              Logger.log("File does not exist")
              trackMerged.setValue("-");
            }else{
              trackMerged.setValue("+");
            }
        }
      }
    }else{
        trackMerged.setValue("-");
        }
    }
}

function checkFolder(rootfolder, foldername){
  var resultsFolder;
  var hasF  = DriveApp.getFolderById(rootfolder).getFoldersByName(foldername);
  //Нет папки
  if(!hasF.hasNext()){
    resultsFolder =  hasF.hasNext();
  }
  //Есть папка
  else{
    resultsFolder =  hasF.hasNext();
  }
  return resultsFolder;
}

function checkFile(rootfolder, filename){
  var resultsFile;
  var hasFi = DriveApp.getFolderById(rootfolder).getFilesByName(filename);
  if(!hasFi.hasNext()){
    resultsFile = hasFi.hasNext();
  }
  else{
    resultsFile = hasFi.hasNext();
  }
  return resultsFile;
}